class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        # 00000000000000000000000000000010 (2**1)
        # 00000000000000000000000000000100 (2**2)
        # 00000000000000000000000000001000 (2**3)
        # 00000000000000000000000000010000 (2**4)
        # 00000000000000000000000000100000 (2**5)
        # 00000000000000000000000001000000 (2**6)
        # 00000000000000000000000010000000 (2**7)
        # 00000000000000000000000100000000 (2**8)
        # 00000000000000000000001000000000 (2**9)
        # 00000000000000000000010000000000 (2**10)
        # 00000000000000000000100000000000 (2**11)
        # 00000000000000000001000000000000 (2**12)
        # 00000000000000000010000000000000 (2**13)
        # 00000000000000000100000000000000 (2**14)
        # 00000000000000001000000000000000 (2**15)
        # 00000000000000010000000000000000 (2**16)
        # 00000000000000100000000000000000 (2**17)
        # 00000000000001000000000000000000 (2**18)
        # 00000000000010000000000000000000 (2**19)
        # 00000000000100000000000000000000 (2**20)
        # 00000000001000000000000000000000 (2**21)
        # 00000000010000000000000000000000 (2**22)
        # 00000000100000000000000000000000 (2**23)
        # 00000001000000000000000000000000 (2**24)
        # 00000010000000000000000000000000 (2**25)
        # 00000100000000000000000000000000 (2**26)
        # 00001000000000000000000000000000 (2**27)
        # 00010000000000000000000000000000 (2**28)
        # 00100000000000000000000000000000 (2**29)
        # 01000000000000000000000000000000 (2**30)
        # 10000000000000000000000000000000 (2**31)
        return n > 0 and (n & (n - 1)) == 0


if __name__ == '__main__':
    import unittest
    from timeit import timeit

    CASES = (
        (1, True),
        (2, True),
        (3, False),
        (4, True),
        (5, False),
        (6, False),
        (7, False),
        (8, True),
        (9, False),
        (10, False),
        (11, False),
        (12, False),
        (13, False),
        (14, False),
        (15, False),
        (16, True),
    )

    class Test(unittest.TestCase):
        def test(self):
            isPalindrome = Solution().isPowerOfTwo
            for n, excepted in CASES:
                actual = isPalindrome(n)
                self.assertEqual(actual, excepted)

    unittest.main()

    isPowerOfTwo = Solution().isPowerOfTwo
    for n, _ in CASES:
        print(timeit(lambda: isPowerOfTwo(n), number=10000))
