class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        # 00000000000000000000000000000001 (4**0)
        # 00000000000000000000000000000100 (4**1)
        # 00000000000000000000000000010000 (4**2)
        # 00000000000000000000000001000000 (4**3)
        # 00000000000000000000000100000000 (4**4)
        # 00000000000000000000010000000000 (4**5)
        # 00000000000000000001000000000000 (4**6)
        # 00000000000000000100000000000000 (4**7)
        # 00000000000000010000000000000000 (4**8)
        # 00000000000001000000000000000000 (4**9)
        # 00000000000100000000000000000000 (4**10)
        # 00000000010000000000000000000000 (4**11)
        # 00000001000000000000000000000000 (4**12)
        # 00000100000000000000000000000000 (4**13)
        # 00010000000000000000000000000000 (4**14)
        # 01000000000000000000000000000000 (4**15)
        # 01010101010101010101010101010101 (0x55555555)
        # 10101010101010101010101010101010 (0xAAAAAAAA)
        return n > 0 and (n & (n - 1)) == 0 and (n & 0x55555555) == n
        # return (n & (n - 1)) == 0 and (n & 0x55555555) != 0

        # 00000000000000000000000000000001 (4**0 % 3)
        # 00000000000000000000000000000001 (4**1 % 3)
        # 00000000000000000000000000000001 (4**2 % 3)
        # 00000000000000000000000000000001 (4**3 % 3)
        # 00000000000000000000000000000001 (4**4 % 3)
        # 00000000000000000000000000000001 (4**5 % 3)
        # 00000000000000000000000000000001 (4**6 % 3)
        # 00000000000000000000000000000001 (4**7 % 3)
        # 00000000000000000000000000000001 (4**8 % 3)
        # 00000000000000000000000000000001 (4**9 % 3)
        # 00000000000000000000000000000001 (4**10 % 3)
        # 00000000000000000000000000000001 (4**11 % 3)
        # 00000000000000000000000000000001 (4**12 % 3)
        # 00000000000000000000000000000001 (4**13 % 3)
        # 00000000000000000000000000000001 (4**14 % 3)
        # 00000000000000000000000000000001 (4**15 % 3)
        # return n > 0 and (n & (n - 1)) == 0 and n % 3 == 1

        # return n > 0 and (n & (n - 1)) == 0 and int(n**.5)**2 == n


if __name__ == '__main__':
    import unittest
    from timeit import timeit

    CASES = (
        (0, False),
        (1, True),
        (2, False),
        (3, False),
        (4, True),
        (5, False),
        (6, False),
        (7, False),
        (8, False),
        (9, False),
        (10, False),
        (11, False),
        (12, False),
        (13, False),
        (14, False),
        (15, False),
        (16, True),
        (32, False),
        (64, True),
        (128, False),
        (256, True),
        (512, False),
        (1024, True),
        (2048, False),
        (4096, True),
        (8192, False),
    )

    class Test(unittest.TestCase):
        def test(self):
            isPowerOfFour = Solution().isPowerOfFour
            for n, excepted in CASES:
                actual = isPowerOfFour(n)
                self.assertEqual(actual, excepted)

    unittest.main()

    isPowerOfFour = Solution().isPowerOfFour
    for n, _ in CASES:
        print(timeit(lambda: isPowerOfFour(n), number=10000))
